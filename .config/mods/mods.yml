# https://github.com/charmbracelet/mods/blob/main/config_template.yml
default-model: claude3.5-sonnet
# Text to append when using the -f flag.
format-text:
  markdown: "Format the response as markdown without enclosing backticks."
  json: "Format the response as json without enclosing backticks."
# List of predefined system messages that can be used as roles.
roles:
  default: []
  dev:
    - As an adept programmer and helpful support aid, you are tasked   with navigating through code diagnostics, identifying and rectifying warning   and error messages. When a resolution involves the use of code, offer   solutions as fenced codeblocks, ensuring to identify the specific coding   language to enable syntax highlighting and seamless implementation.
  commit-message:
    - |
      Write a commit message for this patch.
      Do not write the long commit message.
      Use semantic commits.
      Use as a scope only "feat|fix|chore|test|refactor".
      Only lowercase.
      Limit to 50 characters.
  code-review:
    - |
      Perform a code review on this code.
      List out any logical flaws or bugs you find, ranked in order of
      severity with the most severe issues presented first.
      When you spot a bug or issue, please always suggest a remediation.
      Include code snippets only when necessary to understand the issue.
      Does the code follow common coding conventions and idioms for the
      language used? Does it include appropriate tests? If not, suggest
      initial tests that could be added.
  explain-command:
    - |
      As a shell expert, you need to explain, and provide examples of use cases for the given shell command.

# Ask for the response to be formatted as markdown unless otherwise set.
format: false
# System role to use.
role: "default"
# Render output as raw text when connected to a TTY.
raw: false
# Quiet mode (hide the spinner while loading and stderr messages for success).
quiet: false
# Temperature (randomness) of results, from 0.0 to 2.0.
temp: 1.0
# TopP, an alternative to temperature that narrows response, from 0.0 to 1.0.
topp: 1.0
# Turn off the client-side limit on the size of the input into the model.
no-limit: false
# Wrap formatted output at specific width (default is 80)
word-wrap: 80
# Include the prompt from the arguments in the response.
include-prompt-args: false
# Include the prompt from the arguments and stdin, truncate stdin to specified number of lines.
include-prompt: 0
# Maximum number of times to retry API calls.
max-retries: 5
# Your desired level of fanciness.
fanciness: 10
# Text to show while generating.
status-text: Generating
# Default character limit on input to model.
max-input-chars: 12250
# Maximum number of tokens in response.
# max-tokens: 100
# Aliases and endpoints for OpenAI compatible REST API.
apis:
  anthropic:
    base-url: https://api.anthropic.com/v1
    api-key:
    api-key-env: ANTHROPIC_API_KEY
    models: # https://docs.anthropic.com/en/docs/about-claude/models
      claude-3-5-sonnet-latest:
        aliases: ["claude3.5-sonnet", "claude-3-5-sonnet", "sonnet-3.5"]
        max-input-chars: 680000
      claude-3-5-sonnet-20241022:
        max-input-chars: 680000
      claude-3-5-sonnet-20240620:
        max-input-chars: 680000
      claude-3-opus-20240229:
        aliases: ["claude3-opus", "opus"]
        max-input-chars: 680000
  ollama:
    base-url: http://localhost:11434/api
    models: # https://ollama.com/library
      "llama3.2":
        aliases: ["llama3.2"]
        max-input-chars: 650000
      "llama3.2:1b":
        aliases: ["llama3.2_1b"]
        max-input-chars: 650000
      "llama3:70b":
        aliases: ["llama3"]
        max-input-chars: 650000
  openai:
    base-url: https://api.openai.com/v1
    api-key:
    api-key-env: OPENAI_API_KEY
    models:
      chatgpt-4o-latest:
        aliases: ["chatgpt"]
        max-input-chars: 392000
      gpt-4o-mini:
        aliases: ["4o-mini"]
        max-input-chars: 392000
        fallback: gpt-4o
      gpt-4o:
        aliases: ["4o"]
        max-input-chars: 392000
        fallback: gpt-4
      gpt-4:
        aliases: ["4"]
        max-input-chars: 24500
        fallback: gpt-3.5-turbo
      gpt-4-1106-preview:
        aliases: ["128k"]
        max-input-chars: 392000
        fallback: gpt-4
      gpt-4-32k:
        aliases: ["32k"]
        max-input-chars: 98000
        fallback: gpt-4
      gpt-3.5-turbo:
        aliases: ["35t"]
        max-input-chars: 12250
        fallback: gpt-3.5
      gpt-3.5-turbo-1106:
        aliases: ["35t-1106"]
        max-input-chars: 12250
        fallback: gpt-3.5-turbo
      gpt-3.5-turbo-16k:
        aliases: ["35t16k"]
        max-input-chars: 44500
        fallback: gpt-3.5
      gpt-3.5:
        aliases: ["35"]
        max-input-chars: 12250
        fallback:
  groq:
    base-url: https://api.groq.com/openai/v1
    api-key-env: GROQ_API_KEY
    models:
      mixtral-8x7b-32768:
        aliases: ["mixtral"]
        max-input-chars: 98000
      llama2-70b-4096:
        aliases: ["llama2"]
        max-input-chars: 12250
  localai:
    # LocalAI setup instructions: https://github.com/go-skynet/LocalAI#example-use-gpt4all-j-model
    base-url: http://localhost:8080
    models:
      ggml-gpt4all-j:
        aliases: ["local", "4all"]
        max-input-chars: 12250
        fallback:
  azure:
    # Set to 'azure-ad' to use Active Directory
    # Azure OpenAI setup: https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource
    base-url: https://YOUR_RESOURCE_NAME.openai.azure.com
    api-key:
    api-key-env: AZURE_OPENAI_KEY
    models:
      gpt-4:
        aliases: ["az4"]
        max-input-chars: 24500
        fallback: gpt-35-turbo
      gpt-35-turbo:
        aliases: ["az35t"]
        max-input-chars: 12250
        fallback: gpt-35
      gpt-35:
        aliases: ["az35"]
        max-input-chars: 12250
        fallback:
